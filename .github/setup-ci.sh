#!/bin/bash
set -euo pipefail

# Script d'activation rapide de la CI de s√©curit√© pour SCD-CC
# Bas√© sur le guide "S√©curisation des Scripts Bash _ Bonnes Pratiques"

# D√©claration et assignation s√©par√©es pour √©viter de masquer les codes de retour
declare SCRIPT_DIR
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_DIR

declare PROJECT_ROOT
PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
readonly PROJECT_ROOT

# Couleurs pour l'affichage
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

echo -e "${BLUE}üîí Configuration de la CI de S√©curit√© SCD-CC${NC}"
echo -e "${BLUE}üìÇ Projet: $PROJECT_ROOT${NC}"
echo ""

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    echo -e "${YELLOW}üîç V√©rification des pr√©requis...${NC}"
    
    local missing_tools=()
    
    # Outils requis pour l'approche JavaScript/Node.js
    local required_tools=("git" "node" "npm")
    
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        else
            echo -e "${GREEN}‚úÖ $tool d√©tect√©${NC}"
            if [[ "$tool" == "node" ]]; then
                local node_version
                node_version=$(node --version)
                echo -e "${GREEN}   Version: $node_version${NC}"
            fi
            if [[ "$tool" == "npm" ]]; then
                local npm_version
                npm_version=$(npm --version)
                echo -e "${GREEN}   Version: $npm_version${NC}"
            fi
        fi
    done
    
    # Outils optionnels mais recommand√©s
    local optional_tools=("gh" "shellcheck")
    
    for tool in "${optional_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  $tool non install√© (recommand√©)${NC}"
        else
            echo -e "${GREEN}‚úÖ $tool d√©tect√©${NC}"
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå Outils manquants: ${missing_tools[*]}${NC}"
        echo "Veuillez installer ces outils avant de continuer."
        echo ""
        echo -e "${YELLOW}üí° Suggestions d'installation:${NC}"
        echo "  ‚Ä¢ Node.js: https://nodejs.org/ ou via gestionnaire de paquets"
        echo "  ‚Ä¢ npm: G√©n√©ralement inclus avec Node.js"
        return 1
    fi
    
    return 0
}

# Installation des d√©pendances Node.js et Husky
install_node_dependencies() {
    echo -e "${BLUE}ÔøΩ Installation des d√©pendances Node.js...${NC}"
    
    if [[ ! -f "${PROJECT_ROOT}/package.json" ]]; then
        echo -e "${RED}‚ùå package.json non trouv√©${NC}"
        return 1
    fi
    
    echo "Installation des d√©pendances npm..."
    if cd "$PROJECT_ROOT" && npm install; then
        echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
    else
        echo -e "${RED}‚ùå √âchec de l'installation des d√©pendances${NC}"
        return 1
    fi
    
    # V√©rification que Husky est install√©
    if [[ -d "${PROJECT_ROOT}/.husky" ]]; then
        echo -e "${GREEN}‚úÖ Husky configur√©${NC}"
    else
        echo "Configuration de Husky..."
        if cd "$PROJECT_ROOT" && npm run prepare; then
            echo -e "${GREEN}‚úÖ Husky install√© et configur√©${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Probl√®me avec la configuration Husky${NC}"
        fi
    fi
}

# Installation des outils de s√©curit√©
install_security_tools() {
    echo -e "${BLUE}üîç V√©rification des outils de s√©curit√©...${NC}"
    
    # ShellCheck (optionnel si pas install√© syst√®me)
    if ! command -v shellcheck >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  ShellCheck non install√© au niveau syst√®me${NC}"
        echo "Installation recommand√©e:"
        echo "  ‚Ä¢ Ubuntu/Debian: sudo apt install shellcheck"
        echo "  ‚Ä¢ macOS: brew install shellcheck"
        echo "  ‚Ä¢ Ou utilisez la version npm (incluse dans les d√©pendances)"
    else
        echo -e "${GREEN}‚úÖ ShellCheck d√©tect√©${NC}"
    fi
    
    # Test du script de s√©curit√© personnalis√©
    if [[ -f "${PROJECT_ROOT}/scripts/bash-security-check.js" ]]; then
        echo "Test du script de s√©curit√© personnalis√©..."
        if cd "$PROJECT_ROOT" && node scripts/bash-security-check.js --help >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Script de s√©curit√© fonctionnel${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Le script de s√©curit√© peut avoir des probl√®mes${NC}"
        fi
    else
        echo -e "${RED}‚ùå Script de s√©curit√© manquant${NC}"
        return 1
    fi
    
    # Initialisation du baseline de secrets si n√©cessaire
    if [[ ! -f "${PROJECT_ROOT}/.secrets.baseline" ]]; then
        echo "Cr√©ation du baseline de d√©tection de secrets..."
        if cd "$PROJECT_ROOT"; then
            echo "{\"results\": {}, \"generated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > .secrets.baseline
        fi
        echo -e "${GREEN}‚úÖ Baseline cr√©√©${NC}"
    fi
}

# V√©rification de la configuration Git
check_git_config() {
    echo -e "${BLUE}üîß V√©rification de la configuration Git...${NC}"
    
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Pas dans un d√©p√¥t Git${NC}"
        return 1
    fi
    
    # V√©rification de l'origine remote
    if git remote get-url origin >/dev/null 2>&1; then
        local origin_url
        origin_url=$(git remote get-url origin)
        echo -e "${GREEN}‚úÖ Repository: $origin_url${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pas de remote 'origin' configur√©${NC}"
    fi
    
    # V√©rification des branches
    local current_branch
    current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
    echo -e "${GREEN}‚úÖ Branche courante: $current_branch${NC}"
    
    return 0
}

# Test des hooks Husky et des scripts
test_husky_hooks() {
    echo -e "${BLUE}üß™ Test des hooks Husky et scripts de s√©curit√©...${NC}"
    
    # Test du script de s√©curit√©
    if [[ -f "${PROJECT_ROOT}/scripts/bash-security-check.js" ]]; then
        echo "Test du script de s√©curit√©..."
        if cd "$PROJECT_ROOT" && npm run security-check; then
            echo -e "${GREEN}‚úÖ Script de s√©curit√© fonctionne${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Le script de s√©curit√© a d√©tect√© des probl√®mes${NC}"
        fi
    fi
    
    # Test des scripts npm
    echo "Test des scripts de linting..."
    if cd "$PROJECT_ROOT" && npm run test; then
        echo -e "${GREEN}‚úÖ Tous les tests ont r√©ussi${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√© (normal pour la premi√®re fois)${NC}"
        echo "Les scripts corrigeront automatiquement certains probl√®mes."
    fi
}

# V√©rification des fichiers de configuration
check_config_files() {
    echo -e "${BLUE}üìÅ V√©rification des fichiers de configuration...${NC}"
    
    local config_files=(
        ".github/workflows/security-quality.yml"
        "package.json"
        "scripts/bash-security-check.js"
        ".shellcheckrc"
        ".secrets.baseline"
        ".github/BRANCH_PROTECTION.md"
    )
    
    local missing_files=()
    
    for file in "${config_files[@]}"; do
        if [[ -f "${PROJECT_ROOT}/$file" ]]; then
            echo -e "${GREEN}‚úÖ $file${NC}"
        else
            echo -e "${RED}‚ùå $file manquant${NC}"
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Fichiers manquants: ${#missing_files[@]}${NC}"
        return 1
    fi
    
    return 0
}

# Affichage du r√©sum√©
show_summary() {
    echo ""
    echo -e "${GREEN}‚úÖ Configuration de la CI de s√©curit√© termin√©e!${NC}"
    echo ""
    echo -e "${BLUE}üìã R√©sum√© de la configuration:${NC}"
    echo "  üîí GitHub Actions workflow pour l'analyse de s√©curit√©"
    echo "  üêö ShellCheck pour l'analyse statique des scripts"
    echo "  üîç Script de s√©curit√© personnalis√© en JavaScript"
    echo "  üìã Hooks Husky + lint-staged pour la validation locale"
    echo "  üõ°Ô∏è  V√©rifications de permissions et bonnes pratiques"
    echo "  üì¶ Configuration npm avec scripts automatis√©s"
    echo ""
    echo -e "${YELLOW}üöÄ Prochaines √©tapes:${NC}"
    echo "  1. Commitez et poussez ces changements"
    echo "  2. Configurez les protections de branche (voir .github/BRANCH_PROTECTION.md)"
    echo "  3. Cr√©ez une Pull Request pour tester la CI"
    echo ""
    echo -e "${BLUE}üìñ Documentation:${NC}"
    echo "  - Guide complet: docs/bash/S√©curisation des Scripts Bash _ Bonnes Pratiques.md"
    echo "  - Configuration des branches: .github/BRANCH_PROTECTION.md"
    echo "  - Workflow CI: .github/workflows/security-quality.yml"
}

# Fonction principale
main() {
    # V√©rifications pr√©liminaires
    if ! check_prerequisites; then
        exit 1
    fi
    
    if ! check_git_config; then
        exit 1
    fi
    
    # V√©rification des fichiers de configuration
    if ! check_config_files; then
        echo -e "${YELLOW}‚ö†Ô∏è  Certains fichiers de configuration sont manquants${NC}"
        echo "Assurez-vous que tous les fichiers CI ont √©t√© cr√©√©s correctement."
    fi
    
    # Installation des outils
    install_node_dependencies || echo -e "${YELLOW}‚ö†Ô∏è  Probl√®me avec les d√©pendances Node.js${NC}"
    install_security_tools || echo -e "${YELLOW}‚ö†Ô∏è  Probl√®me avec les outils de s√©curit√©${NC}"
    
    # Test des hooks
    test_husky_hooks
    
    # R√©sum√© final
    show_summary
}

# Gestion des interruptions
trap 'echo -e "\n${YELLOW}‚ö†Ô∏è  Configuration interrompue${NC}"; exit 130' INT TERM

# Ex√©cution du script principal
main "$@"